initSidebarItems({"enum":[["Attribute","A way of indicating to LLVM how you want arguments / functions to be handled."],["Predicate","A way of comparing values"]],"struct":[["Arg","A value that represents an argument that has been given to a function."],["BasicBlock","A container of instructions that execute sequentially."],["Builder","This provides a uniform API for creating instructions and inserting them into a basic block."],["CBox","A wrapper for pointers made by C that are now completely owned by Rust, so they are not limited by any lifetimes."],["CSemiBox","A wrapper for pointers made by C that are now partially owned in Rust."],["Context","Contains all the LLVM entities such as modules."],["Function","A `Value` that represents a `Function`"],["FunctionType","A function signature type"],["Functions","An iterator through the functions contained in a module."],["GenericValue","A wrapped value that can be passed to an interpreted function or returned from one"],["Interpreter","The interpreter backend"],["JitEngine","The MCJIT backend, which compiles functions and values into machine code."],["JitOptions","The options to pass to the MCJIT backend."],["Module","Represents a single translation unit of code."],["ObjectFile","An external object file that has been parsed by LLVLM"],["StructType","A structure type, such as a tuple or struct"],["Symbol",""],["Symbols",""],["Target",""],["TargetData",""],["Type","Defines how a value should be laid out in memory."],["Value","A typed value that can be used as an operand in instructions."]],"trait":[["CastFrom","Cast between types"],["Compile","Implemented for any type that can be represented as a constant in IR."],["ExecutionEngine","An abstract interface for implementation execution of LLVM modules."],["GenericValueCast","A value that can be cast into a `GenericValue` and that a `GenericValue` can be cast into."],["GetContext","Implemented by everything that is owned by a context."]]});